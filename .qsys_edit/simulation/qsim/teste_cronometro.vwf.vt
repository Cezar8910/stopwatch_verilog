// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/23/2024 15:20:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cronometro
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cronometro_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg contarI;
reg pararI;
reg pausarI;
reg resetI;
// wires                                               
wire [6:0] display_css;
wire [6:0] display_dss;
wire [6:0] display_mss;
wire [6:0] display_uss;

// assign statements (if any)                          
cronometro i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.contarI(contarI),
	.display_css(display_css),
	.display_dss(display_dss),
	.display_mss(display_mss),
	.display_uss(display_uss),
	.pararI(pararI),
	.pausarI(pausarI),
	.resetI(resetI)
);
initial 
begin 
#3000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// contarI
initial
begin
	contarI = 1'b1;
	contarI = #20000 1'b0;
	contarI = #60000 1'b1;
	contarI = #1000000 1'b0;
	contarI = #120000 1'b1;
	contarI = #1200000 1'b0;
	contarI = #120000 1'b1;
end 

// pararI
initial
begin
	pararI = 1'b1;
	pararI = #1840000 1'b0;
	pararI = #200000 1'b1;
end 

// pausarI
initial
begin
	pausarI = 1'b1;
	pausarI = #300000 1'b0;
	pausarI = #140000 1'b1;
end 

// resetI
initial
begin
	resetI = 1'b1;
	resetI = #2120000 1'b0;
	resetI = #80000 1'b1;
end 
endmodule

